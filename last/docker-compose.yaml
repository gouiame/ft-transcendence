services:
  django:
    build: ./backend
    container_name: backend
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - transcendence_network
    volumes:
      - ./backend:/backend
    restart: always

  frontend:
    build:
      context: ./frontend
      args:
        - SERVER_NAME=${SERVER_NAME}
    container_name: frontend
    networks:
      - transcendence_network
    depends_on:
      - django
    restart: always

  db:
    image: postgres:12
    container_name: db
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - transcendence_network

  nginx:
    container_name: nginx
    build: ./nginx
    networks:
      - transcendence_network
    ports:
      - "80:80"
      - "443:443"
    environment:
      - SERVER_NAME=${SERVER_NAME}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./backend/media:/media
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - django
    restart: always

    # ELK
  elasticsearch:
    image: elasticsearch
    build:
      context: ./ELK_stack/elasticsearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    depends_on:
      - setup
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs
    ports:
      - '9200:9200'
    env_file:
      - .env
    environment:
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
    networks:
      - transcendence_network
    restart: always
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  logstash:
    image: logstash
    build:
      context: ./ELK_stack/logstash
      dockerfile: Dockerfile
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./nginx/logs:/usr/share/logstash/nginx/logs
      - certs:/usr/share/logstash/config/certs
    env_file:
      - .env
    networks:
      - transcendence_network
    restart: always

  kibana:
    image: kibana
    build:
      context: ./ELK_stack/kibana
      dockerfile: Dockerfile
    container_name: kibana
    depends_on:
      - elasticsearch
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    ports:
      - '5601:5601'
    env_file:
      - .env
    networks:
      - transcendence_network
    restart: always
    mem_limit: ${MEM_LIMIT}

  setup:
    image: setup
    build:
      context: ./ELK_stack/setup
      dockerfile: Dockerfile
    container_name: setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    networks:
      - transcendence_network
    restart: always

volumes:
  postgres_data:
  certs:
  elasticsearch:
  kibana:

networks:
  transcendence_network:
    driver: bridge
